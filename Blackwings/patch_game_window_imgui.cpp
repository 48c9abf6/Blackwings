#include "pch.h"

extern IMGUI_IMPL_API LRESULT ImGui_ImplWin32_WndProcHandler(
    HWND hWnd, 
    UINT msg, 
    WPARAM wParam, 
    LPARAM lParam
);

typedef HRESULT(APIENTRY* _IDirect3DDevice9__Reset_t)(LPDIRECT3DDEVICE9 pDevice, D3DPRESENT_PARAMETERS* pPresentationParameters);
typedef HRESULT(APIENTRY* _IDirect3DDevice9__Present_t)(LPDIRECT3DDEVICE9 pDevice, const RECT *pSourceRect, const RECT *pDestRect, HWND hDestWindowOverride, const RGNDATA *pDirtyRegion);
typedef HRESULT(APIENTRY* _D3DXCreateTextureFromFileInMemory_t)(LPDIRECT3DDEVICE9 pDevice, LPCVOID pSrcData, UINT SrcDataSize, LPDIRECT3DTEXTURE9* ppTexture);

const UCHAR CURSOR_NORMAL[] = { 0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x1C, 0x08, 0x06, 0x00, 0x00, 0x00, 0x7B, 0xE6, 0x7F, 0xEE, 0x00, 0x00, 0x00, 0x01, 0x73, 0x52, 0x47, 0x42, 0x00, 0xAE, 0xCE, 0x1C, 0xE9, 0x00, 0x00, 0x00, 0x04, 0x67, 0x41, 0x4D, 0x41, 0x00, 0x00, 0xB1, 0x8F, 0x0B, 0xFC, 0x61, 0x05, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0E, 0xC3, 0x00, 0x00, 0x0E, 0xC3, 0x01, 0xC7, 0x6F, 0xA8, 0x64, 0x00, 0x00, 0x01, 0x36, 0x49, 0x44, 0x41, 0x54, 0x48, 0x4B, 0xCD, 0x96, 0xEB, 0x11, 0x84, 0x20, 0x0C, 0x84, 0xAD, 0xF6, 0x6A, 0xB1, 0x05, 0x5A, 0xB0, 0x05, 0x5B, 0xB0, 0x05, 0x5A, 0xB0, 0x05, 0x8E, 0x8D, 0x04, 0x43, 0x04, 0x94, 0x9B, 0xDC, 0xDC, 0x39, 0x93, 0x11, 0xFD, 0xB1, 0x9F, 0x6C, 0x1E, 0x38, 0x4D, 0xE7, 0x15, 0xE2, 0x92, 0x43, 0xBC, 0xB6, 0x59, 0x06, 0x1F, 0x42, 0x8E, 0x04, 0xB2, 0x51, 0x86, 0x18, 0x8B, 0x47, 0xC6, 0x57, 0x20, 0x24, 0x2A, 0x2F, 0x3C, 0x5B, 0xEE, 0xA2, 0x0A, 0xB0, 0x84, 0x14, 0x16, 0xF1, 0x4E, 0x2C, 0x01, 0x48, 0xE6, 0xEF, 0x76, 0xA1, 0x76, 0x22, 0x4B, 0x79, 0x38, 0x4F, 0x4D, 0xAB, 0x18, 0xE2, 0xD6, 0xED, 0x2C, 0xE7, 0x7D, 0x0F, 0xAB, 0xF7, 0xC3, 0xC0, 0x2E, 0x04, 0x82, 0xB2, 0x5F, 0x7C, 0x84, 0x00, 0x8A, 0xF7, 0xB8, 0x2F, 0x31, 0x9E, 0x54, 0x5F, 0x17, 0x42, 0x80, 0x28, 0xCC, 0x01, 0x71, 0x0E, 0x1B, 0x48, 0x12, 0xD7, 0xC2, 0x10, 0x1F, 0x02, 0x34, 0x2B, 0x4B, 0x01, 0x58, 0x58, 0x02, 0xEE, 0xAC, 0x22, 0x8B, 0xD8, 0x57, 0xDD, 0xE1, 0xDA, 0x9A, 0x51, 0x40, 0x91, 0x44, 0x40, 0x2E, 0x80, 0x94, 0x03, 0xE9, 0xBB, 0xFE, 0xFA, 0xDE, 0x0E, 0x8A, 0x86, 0xD3, 0x33, 0x2A, 0x0F, 0xC3, 0x86, 0x4D, 0x10, 0xA6, 0xD8, 0x72, 0xF9, 0x5E, 0x26, 0xF2, 0xA5, 0xA3, 0xD5, 0x1C, 0x3C, 0x76, 0xF8, 0xF7, 0x80, 0x9A, 0x35, 0x72, 0x08, 0xF6, 0x12, 0x7D, 0x67, 0x51, 0x1E, 0x7C, 0x2D, 0x48, 0xCD, 0xA2, 0x5A, 0xC2, 0x7B, 0x1D, 0x7D, 0x78, 0x9C, 0x4E, 0xB7, 0x56, 0x15, 0xC9, 0x6E, 0xC6, 0x5A, 0x43, 0xEE, 0x7B, 0x41, 0x40, 0xF4, 0xFC, 0xC9, 0xE2, 0x7C, 0xC4, 0x8A, 0xA4, 0x8F, 0x74, 0x34, 0x0D, 0x2E, 0xFD, 0xA5, 0xFC, 0x5C, 0xE4, 0x24, 0x55, 0x16, 0xC4, 0x67, 0xB7, 0x50, 0x60, 0xFD, 0x64, 0xF0, 0x51, 0x4E, 0x10, 0xB2, 0x63, 0x65, 0x7E, 0xB0, 0x96, 0xC2, 0x9F, 0x00, 0xB8, 0x59, 0x08, 0xF4, 0x9A, 0x5D, 0x91, 0x23, 0x2B, 0x71, 0xD9, 0x91, 0xC5, 0x19, 0xC0, 0x5F, 0xCC, 0xB6, 0x8C, 0x58, 0xD3, 0xFB, 0xF1, 0x2A, 0x2C, 0x63, 0xFB, 0xAC, 0xFF, 0x0C, 0x1F, 0x1D, 0x97, 0x6F, 0xE5, 0xED, 0xD4, 0xCA, 0xE5, 0x4B, 0x6B, 0x2B, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82 };
const UCHAR CURSOR_CLICKED[] = { 0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x17, 0x08, 0x06, 0x00, 0x00, 0x00, 0xFE, 0xE3, 0xE4, 0x13, 0x00, 0x00, 0x00, 0x01, 0x73, 0x52, 0x47, 0x42, 0x00, 0xAE, 0xCE, 0x1C, 0xE9, 0x00, 0x00, 0x00, 0x04, 0x67, 0x41, 0x4D, 0x41, 0x00, 0x00, 0xB1, 0x8F, 0x0B, 0xFC, 0x61, 0x05, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0E, 0xC3, 0x00, 0x00, 0x0E, 0xC3, 0x01, 0xC7, 0x6F, 0xA8, 0x64, 0x00, 0x00, 0x01, 0x35, 0x49, 0x44, 0x41, 0x54, 0x48, 0x4B, 0xCD, 0x96, 0xE1, 0x11, 0x83, 0x20, 0x0C, 0x85, 0x3B, 0x6D, 0x67, 0x71, 0x05, 0x57, 0x70, 0x05, 0x57, 0x70, 0x05, 0x57, 0x70, 0x05, 0xCA, 0x4B, 0x09, 0x3E, 0x42, 0x04, 0xED, 0xF1, 0xA3, 0xDE, 0xE5, 0x8A, 0xB6, 0xE4, 0xF3, 0xC5, 0xBC, 0xD8, 0xD7, 0xEB, 0x3C, 0x42, 0x5C, 0x72, 0xD0, 0x57, 0x63, 0x96, 0x61, 0x0F, 0xA1, 0x08, 0x02, 0x0E, 0x21, 0x48, 0x72, 0x3E, 0x18, 0xE8, 0xC0, 0xAC, 0x62, 0x9C, 0x77, 0x8F, 0x0A, 0xA2, 0x40, 0x0F, 0x36, 0xAF, 0xDB, 0xA9, 0xF8, 0x38, 0xC2, 0xBA, 0xEF, 0xB7, 0xA0, 0x79, 0x93, 0x11, 0x94, 0x4F, 0x19, 0x86, 0xA4, 0x45, 0x69, 0x23, 0x08, 0x60, 0x5C, 0xC7, 0xE7, 0x12, 0x23, 0xA9, 0xAF, 0xD4, 0xC9, 0x0F, 0x74, 0xF3, 0x1D, 0xD8, 0x1E, 0x93, 0x6B, 0x00, 0xA0, 0xD1, 0x05, 0xE1, 0x0E, 0x7A, 0x30, 0xB9, 0x91, 0x04, 0xB0, 0xC9, 0xB1, 0xB7, 0x07, 0x51, 0x79, 0x22, 0x57, 0x61, 0x56, 0x95, 0x07, 0xD1, 0xE4, 0x0C, 0x69, 0x95, 0x8D, 0xEB, 0xE8, 0x82, 0x46, 0x42, 0x8A, 0x92, 0xB8, 0xED, 0x9D, 0x3A, 0x4B, 0x1F, 0xB8, 0x55, 0xD1, 0x53, 0x52, 0xB4, 0xB4, 0xF5, 0x10, 0x80, 0x2D, 0x35, 0x48, 0x2E, 0xB1, 0xE5, 0xD6, 0x76, 0x3D, 0x74, 0xE9, 0x9B, 0xC2, 0x3F, 0xE6, 0xE1, 0x57, 0x4A, 0xFE, 0x06, 0xE2, 0x95, 0xE9, 0x8E, 0x12, 0x6D, 0xE1, 0x5E, 0xB9, 0x50, 0xC3, 0xA6, 0x31, 0xAF, 0xBC, 0x62, 0x9B, 0xE0, 0xCA, 0xF9, 0xD9, 0x2B, 0x62, 0xB8, 0xF4, 0x90, 0xAF, 0xBA, 0x8B, 0x5D, 0x8F, 0x35, 0xBB, 0xFE, 0xB6, 0x29, 0x19, 0x64, 0xE7, 0x55, 0x06, 0x38, 0xDD, 0xF6, 0xC4, 0xF9, 0x52, 0x36, 0x29, 0x1D, 0xCD, 0x29, 0x5E, 0x57, 0xD3, 0x3A, 0x0D, 0xCB, 0x69, 0x5E, 0x02, 0x02, 0xB0, 0x5E, 0xC9, 0x0A, 0xF7, 0xEB, 0xA8, 0xD1, 0xBB, 0xE4, 0xC6, 0xC0, 0x1A, 0xD7, 0x35, 0xF9, 0xAF, 0x90, 0x62, 0xAE, 0xBD, 0xA7, 0xF9, 0xAB, 0x2E, 0x95, 0x6A, 0x24, 0xA0, 0x9A, 0x6B, 0xDA, 0x4D, 0xAC, 0x40, 0x95, 0x3E, 0x29, 0x53, 0xEB, 0xB5, 0x2A, 0x25, 0xB2, 0x31, 0xFA, 0xBF, 0x41, 0x6E, 0x0C, 0x4A, 0xEC, 0xBE, 0xEF, 0x3F, 0xAE, 0x31, 0x97, 0x90, 0x21, 0xB1, 0x9C, 0xE9, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82 };

BOOL bInitUI = FALSE;
HWND hWindow;
LPDIRECT3DTEXTURE9 lCursorTexture;
LPDIRECT3DTEXTURE9 lCursorTextureClicked;

WNDPROC orig_WndProc;
_IDirect3DDevice9__Reset_t      orig_IDirect3DDevice9__Reset;
_IDirect3DDevice9__Present_t    orig_IDirect3DDevice9__Present;
_D3DXCreateTextureFromFileInMemory_t orig_D3DXCreateTextureFromFileInMemory;

LRESULT WINAPI hook_WndProc(
    const HWND hWnd, 
    const UINT msg, 
    const WPARAM wParam,
    const LPARAM lParam
) {
    if (bInitUI && ImGui_ImplWin32_WndProcHandler(hWnd, msg, wParam, lParam))
        return TRUE;

    return CallWindowProc(orig_WndProc, hWnd, msg, wParam, lParam);
}

HRESULT APIENTRY hook_IDirect3DDevice9__Reset(
    LPDIRECT3DDEVICE9 pDevice, 
    D3DPRESENT_PARAMETERS* pPresentationParameters
)
{
    if (bInitUI) {
        ImGui_ImplDX9_Shutdown();
        ImGui_ImplWin32_Shutdown();
        ImGui::DestroyContext();

        SetWindowLongPtr(hWindow, GWLP_WNDPROC, (LONG_PTR)orig_WndProc);
        bInitUI = FALSE;
        hWindow = NULL;
    }

    return orig_IDirect3DDevice9__Reset(pDevice, pPresentationParameters);
}


HRESULT APIENTRY hook_IDirect3DDevice9__Present(
    LPDIRECT3DDEVICE9 pDevice,
    const RECT* pSourceRect, 
    const RECT* pDestRect, 
    HWND hDestWindowOverride, 
    const RGNDATA* pDirtyRegion
)
{
    if (!bInitUI) {
        D3DDEVICE_CREATION_PARAMETERS params = {};

        pDevice->GetCreationParameters(&params);
        
        if (params.hFocusWindow) {
            hWindow = params.hFocusWindow;

            ImGui::CreateContext();
            ImGui::StyleColorsDark();

            ImGuiIO& io = ImGui::GetIO(); (void)io;

            io.IniFilename = nullptr;
            io.ConfigFlags |= ImGuiConfigFlags_NoMouseCursorChange;
            io.Fonts->AddFontDefault();

            if (FAILED(orig_D3DXCreateTextureFromFileInMemory(pDevice, CURSOR_NORMAL, sizeof(CURSOR_NORMAL), &lCursorTexture)) ||
                FAILED(orig_D3DXCreateTextureFromFileInMemory(pDevice, CURSOR_CLICKED, sizeof(CURSOR_CLICKED), &lCursorTextureClicked))
            ) 
            {
                SPDLOG_ERROR("Failed to create cursor textures");
            }

            ImGui_ImplWin32_Init(hWindow);
            ImGui_ImplDX9_Init(pDevice);

            orig_WndProc = (WNDPROC)SetWindowLongPtr(hWindow, GWLP_WNDPROC, (LONG_PTR)hook_WndProc);
            bInitUI = TRUE;
        }
    }

    if (bInitUI) {
        ImGui_ImplDX9_NewFrame();
        ImGui_ImplWin32_NewFrame();
        ImGui::NewFrame();

        ImGuiIO& io = ImGui::GetIO(); (void)io;

        if (io.WantCaptureMouse) {
            auto isMouseDown = ImGui::IsMouseDown(0);

            auto mousePos = io.MousePos;
            auto mousePosAdjust = ImVec2((FLOAT)(mousePos.x - (isMouseDown ? 4 : 0)), (FLOAT)(mousePos.y - (isMouseDown ? 1 : 3)));
            auto texture = isMouseDown ? lCursorTextureClicked : lCursorTexture;
            auto offsetW = isMouseDown ? 25 : 24;
            auto offsetH = (isMouseDown ? 23 : 28);

            ImGui::GetForegroundDrawList()->AddImage(texture, mousePosAdjust, ImVec2(mousePosAdjust.x + offsetW, mousePosAdjust.y + offsetH));
        }

        // TODO: Hide maple cursor
        // Uncomment this to show demo UI
        ImGui::ShowDemoWindow();

        ImGui::EndFrame();
        ImGui::Render();
        ImGui_ImplDX9_RenderDrawData(ImGui::GetDrawData());
    }

    return orig_IDirect3DDevice9__Present(pDevice, pSourceRect, pDestRect, hDestWindowOverride, pDirtyRegion);
}

VOID Patches::PatchGameWindowImGui()
{
    IDirect3D9* pD3D9 = Direct3DCreate9(D3D_SDK_VERSION);
    D3DPRESENT_PARAMETERS d3dParams = {};

    d3dParams.SwapEffect = D3DSWAPEFFECT_DISCARD;
    d3dParams.hDeviceWindow = GetForegroundWindow();
    d3dParams.Windowed = (GetWindowLongPtr(d3dParams.hDeviceWindow, GWL_STYLE) & WS_POPUP) != 0 
        ? FALSE 
        : TRUE;

    IDirect3DDevice9* pDevice = nullptr;

    pD3D9->CreateDevice(
        D3DADAPTER_DEFAULT,
        D3DDEVTYPE_HAL,
        d3dParams.hDeviceWindow,
        D3DCREATE_SOFTWARE_VERTEXPROCESSING,
        &d3dParams,
        &pDevice
    );

    void** pTable = *reinterpret_cast<void***>(pDevice);

    orig_IDirect3DDevice9__Reset = (_IDirect3DDevice9__Reset_t)pTable[16];
    orig_IDirect3DDevice9__Present = (_IDirect3DDevice9__Present_t)pTable[17];

    auto hModule = LoadLibraryA("D3DX9_31");
    
    if (hModule)
        orig_D3DXCreateTextureFromFileInMemory = (_D3DXCreateTextureFromFileInMemory_t)GetProcAddress(hModule, "D3DXCreateTextureFromFileInMemory");

    DetourAttach((PVOID*)&orig_IDirect3DDevice9__Reset, (PVOID)hook_IDirect3DDevice9__Reset);
    DetourAttach((PVOID*)&orig_IDirect3DDevice9__Present, (PVOID)hook_IDirect3DDevice9__Present);

    pDevice->Release();
    pD3D9->Release();

}
